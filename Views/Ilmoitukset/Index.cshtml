@model Kipa_plus.Models.ViewModels.IlmoituksetViewModel
@{
    ViewData["Title"] = "Ilmoitukset";
}

<h1>Ilmoitukset</h1>
<br />
@if(ViewBag.Message != null)
{
    <div class="alert alert-success alert-dismissible" role="alert">
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        @ViewBag.Message
    </div>
}
<div id="GiveAccess" style="display:none;">
    
    <button id="PromptForAccessBtn" class="btn btn-primary">Anna oikeudet push ilmoitusten lähettämiseen</button>
</div>
<div id="NoSupport" style="display:none;">
    Selaimesi ei tue WebPush ilmoituksia tai olet estänyt ne selaimen asetuksista
</div>

<form asp-action="Index" id="form" style="display:none;">
 @Html.AntiForgeryToken()
    <input id="endpoint" name="endpoint" hidden />
    <input id="p256dh" name="p256dh" hidden />
    <input id="auth" name="auth" hidden />

    <button type="submit" class="btn btn-primary">Ota ilmoitukset käyttöön tällä laitteella</button>
</form>
<span  id="deviceWarning" class="text-warning">Huom! Push ilmoituksia voi käyttää vain yhdellä laitteella kerrallaan</span>

<hr />
<table class="table" style="color:white;">
    @foreach(var ilmoitus in Model.Ilmotukset)
    {
        <tr>
            <td>
                <h3><a href="@ilmoitus.RefUrl">@ilmoitus.Title</a></h3>
                <p>@ilmoitus.Message</p>
                <span>@ilmoitus.CreatedAt.ToString("HH.mm dd.MM.yyyy")</span>
            </td>
        </tr>
    }
</table>


@section Scripts {
    <script>
        if ('serviceWorker' in navigator) {
            window.addEventListener("load", () => {
                navigator.serviceWorker.register("/ServiceWorker.js")
                    .then((reg) => {
                        if (Notification.permission === "granted") {
                            $("#form").show();
                            
                            getSubscription(reg);
                        } else if (Notification.permission === "blocked") {
                            $("#NoSupport").show();
                        } else {
                            $("#GiveAccess").show();
                            $("#PromptForAccessBtn").click(() => requestNotificationAccess(reg));
                        }
                    });
            });
        } else {
            $("#NoSupport").show();
        }

        function requestNotificationAccess(reg) {
            Notification.requestPermission(function (status) {
                $("#GiveAccess").hide();
                if (status == "granted") {
                    $("#form").show();
                    getSubscription(reg);
                    
                } else {
                    $("#NoSupport").show();
                }
            });
        }

        function getSubscription(reg) {
            reg.pushManager.getSubscription().then(function (sub) {
                if (sub === null) {
                    reg.pushManager.subscribe({
                        userVisibleOnly: true,
                        applicationServerKey: "@Model.PublicKey"
                    }).then(function (sub) {
                        fillSubscribeFields(sub).then(submitForm);

                    }).catch(function (e) {
                        console.error("Unable to subscribe to push", e);
                    });
                } else {
                    fillSubscribeFields(sub);
                }
            });
        }

        function fillSubscribeFields(sub) {
            $("#endpoint").val(sub.endpoint);
            $("#p256dh").val(arrayBufferToBase64(sub.getKey("p256dh")));
            $("#auth").val(arrayBufferToBase64(sub.getKey("auth")));
            return Promise.resolve();
        }
        function submitForm(){
            $("form").submit();
        }

        function arrayBufferToBase64(buffer) {
            var binary = '';
            var bytes = new Uint8Array(buffer);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }
    </script>
}